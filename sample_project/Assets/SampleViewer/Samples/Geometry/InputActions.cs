//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/SampleViewer/Samples/Geometry/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""DrawingControls"",
            ""id"": ""4ce52dc5-08e5-49a0-b424-e5929f89798e"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""a65ec9e1-347b-4a86-82df-3e83234276bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftShift"",
                    ""type"": ""Button"",
                    ""id"": ""278b0f36-d2bf-4f11-8743-77cd65bfe1fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9a4b5787-25ed-4468-9c33-61db590b794b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7ae8a9b-75b4-4008-8d2b-f5987e5fa6f3"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftShift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DrawingControls
        m_DrawingControls = asset.FindActionMap("DrawingControls", throwIfNotFound: true);
        m_DrawingControls_LeftClick = m_DrawingControls.FindAction("LeftClick", throwIfNotFound: true);
        m_DrawingControls_LeftShift = m_DrawingControls.FindAction("LeftShift", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DrawingControls
    private readonly InputActionMap m_DrawingControls;
    private List<IDrawingControlsActions> m_DrawingControlsActionsCallbackInterfaces = new List<IDrawingControlsActions>();
    private readonly InputAction m_DrawingControls_LeftClick;
    private readonly InputAction m_DrawingControls_LeftShift;
    public struct DrawingControlsActions
    {
        private @InputActions m_Wrapper;
        public DrawingControlsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_DrawingControls_LeftClick;
        public InputAction @LeftShift => m_Wrapper.m_DrawingControls_LeftShift;
        public InputActionMap Get() { return m_Wrapper.m_DrawingControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DrawingControlsActions set) { return set.Get(); }
        public void AddCallbacks(IDrawingControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_DrawingControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DrawingControlsActionsCallbackInterfaces.Add(instance);
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
            @LeftShift.started += instance.OnLeftShift;
            @LeftShift.performed += instance.OnLeftShift;
            @LeftShift.canceled += instance.OnLeftShift;
        }

        private void UnregisterCallbacks(IDrawingControlsActions instance)
        {
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
            @LeftShift.started -= instance.OnLeftShift;
            @LeftShift.performed -= instance.OnLeftShift;
            @LeftShift.canceled -= instance.OnLeftShift;
        }

        public void RemoveCallbacks(IDrawingControlsActions instance)
        {
            if (m_Wrapper.m_DrawingControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDrawingControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_DrawingControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DrawingControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DrawingControlsActions @DrawingControls => new DrawingControlsActions(this);
    public interface IDrawingControlsActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
        void OnLeftShift(InputAction.CallbackContext context);
    }
}
