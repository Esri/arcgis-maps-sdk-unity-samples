//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/SampleViewer/Samples/GeoSpatialAR Sample/Input/ARTouchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ARTouchControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ARTouchControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ARTouchControls"",
    ""maps"": [
        {
            ""name"": ""TouchControls"",
            ""id"": ""c14ad972-1d57-4fd2-a472-b45eac7c3cd7"",
            ""actions"": [
                {
                    ""name"": ""Touched"",
                    ""type"": ""PassThrough"",
                    ""id"": ""331fe5e6-4528-45a4-8ac8-c9c074f8aa56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""997d1a07-603f-4a21-a08a-2d889d79f53b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6d84ec93-b66c-45fb-b058-099b6b6c72cc"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touched"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b0d7163-ac7f-4e8e-88c5-d9420f69a4e7"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchControls
        m_TouchControls = asset.FindActionMap("TouchControls", throwIfNotFound: true);
        m_TouchControls_Touched = m_TouchControls.FindAction("Touched", throwIfNotFound: true);
        m_TouchControls_TouchPosition = m_TouchControls.FindAction("TouchPosition", throwIfNotFound: true);
    }

    ~@ARTouchControls()
    {
        UnityEngine.Debug.Assert(!m_TouchControls.enabled, "This will cause a leak and performance issues, ARTouchControls.TouchControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchControls
    private readonly InputActionMap m_TouchControls;
    private List<ITouchControlsActions> m_TouchControlsActionsCallbackInterfaces = new List<ITouchControlsActions>();
    private readonly InputAction m_TouchControls_Touched;
    private readonly InputAction m_TouchControls_TouchPosition;
    public struct TouchControlsActions
    {
        private @ARTouchControls m_Wrapper;
        public TouchControlsActions(@ARTouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touched => m_Wrapper.m_TouchControls_Touched;
        public InputAction @TouchPosition => m_Wrapper.m_TouchControls_TouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_TouchControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchControlsActions set) { return set.Get(); }
        public void AddCallbacks(ITouchControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchControlsActionsCallbackInterfaces.Add(instance);
            @Touched.started += instance.OnTouched;
            @Touched.performed += instance.OnTouched;
            @Touched.canceled += instance.OnTouched;
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
        }

        private void UnregisterCallbacks(ITouchControlsActions instance)
        {
            @Touched.started -= instance.OnTouched;
            @Touched.performed -= instance.OnTouched;
            @Touched.canceled -= instance.OnTouched;
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
        }

        public void RemoveCallbacks(ITouchControlsActions instance)
        {
            if (m_Wrapper.m_TouchControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchControlsActions @TouchControls => new TouchControlsActions(this);
    public interface ITouchControlsActions
    {
        void OnTouched(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
    }
}
